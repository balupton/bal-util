// Generated by CoffeeScript 1.4.0
(function() {
  var assert, balUtil, joe;

  assert = require('assert');

  joe = require('joe');

  balUtil = require(__dirname + '/../lib/balutil');

  joe.describe('versionCompare', function(describe, it) {
    var operator, resultActual, resultExpected, test, testVersion, v1, v2, versionCompareTestData, _i, _len, _results;
    versionCompareTestData = [['1.1.0', '<', '1.2.0', true], ['1.2.0', '>', '1.1.0', true], ['1.2.0', '==', '1.2.0', true], ['1.2.0', '<=', '1.2.0', true], ['1.2.0', '>=', '1.2.0', true], ['1.2.0', '<', '1.2.1', true], ['1.2.0', '<', '1.3.0', true], ['1.1.0', '>=', '1.2.0', false], ['1.2.0', '<=', '1.1.0', false], ['1.2.0', '<>', '1.2.0', false], ['1.2.0', '>', '1.2.0', false], ['1.2.0', '<', '1.2.0', false], ['1.2.0', '>=', '1.2.1', false], ['1.2.0', '>=', '1.3.0', false]];
    testVersion = function(v1, operator, v2, resultExpected, resultActual) {
      return it("should detect " + v1 + " " + operator + " " + v2 + " is " + resultExpected, function() {
        return assert.equal(resultActual, resultExpected);
      });
    };
    _results = [];
    for (_i = 0, _len = versionCompareTestData.length; _i < _len; _i++) {
      test = versionCompareTestData[_i];
      v1 = test[0];
      operator = test[1];
      v2 = test[2];
      resultExpected = test[3];
      resultActual = balUtil.versionCompare(v1, operator, v2);
      _results.push(testVersion(v1, operator, v2, resultExpected, resultActual));
    }
    return _results;
  });

  joe.describe('packageCompare', function(describe, it) {
    var localPackagePath, remotePackagePath, testVersion;
    localPackagePath = __dirname + '/../../package.json';
    remotePackagePath = 'https://raw.github.com/balupton/bal-util/master/package.json';
    testVersion = function(v1, operator, v2) {
      var resultActual;
      resultActual = balUtil.versionCompare(v1, operator, v2);
      return assert.equal(resultActual, true);
    };
    return it('should run as expected', function(done) {
      return balUtil.packageCompare({
        local: localPackagePath,
        remote: remotePackagePath,
        newVersionCallback: function(details) {
          testVersion(details.local.version, '<', details.remote.version);
          return done();
        },
        sameVersionCallback: function(details) {
          testVersion(details.local.version, '==', details.remote.version);
          return done();
        },
        oldVersionCallback: function(details) {
          testVersion(details.local.version, '>', details.remote.version);
          return done();
        },
        errorCallback: function(err, data) {
          if (/redirected/.test(data.toString())) {
            return done();
          }
          assert.ok(false, 'the package compare request failed');
          return done();
        }
      });
    });
  });

}).call(this);
